Advanced Python
Cisco -- San Jose
June 17, 2013
=================

Taught by:  Raymond Hettinger
            python@rcn.com
            @raymondh

This file:

http://dl.dropbox.com/u/3967849/sj49/links.txt

Download tool:
http://dl.dropbox.com/u/3967849/sj49/download.py
    http://tinyurl.com/python-sj49

Course Objectives:
==================

* Develop skills with Python's most advanced tools:
    descriptors, decorators, metaclasses, optimizations,
    custom string formatting, specialized containers, namedtuples
    Python internals, and new-style classes.

* Form an understanding of Python's mechanics with an aim to being
  able to understand what any piece of code is doing

* Learn Pythonic code styles and API design with an aim to being
  able to use the language effectively.

  
Resources and Reading
====================
* http://www.clemesha.org/blog/modern-python-hacker-tools-virtualenv-fabric-pip/
* http://www.youlikeprogramming.com/2012/03/examples-reading-excel-xls-documents-using-pythons-xlrd/
* http://pravin.insanitybegins.com/posts/writing-a-spider-in-10-mins-using-scrapy
* http://pymotw.com/2/py-modindex.html
* http://www.swig.org/tutorial.html
* http://docs.python-requests.org/en/latest/index.html
* http://pyvideo.org/category/33/pycon-us-2013


Useful Links:
=============
    http://txt2re.com/           Builds regular expressions from examples
    http://en.wikipedia.org/wiki/Open/closed_principle
    http://golubenco.org/2009/09/19/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed/
    http://packages.python.org/dexml/


Day One Notes
=============
http://dl.dropbox.com/u/3967849/shared/FunWithNewerTools.pdf
http://dl.dropbox.com/u/3967849/shared/CoreContainers.pdf
http://dl.dropbox.com/u/3967849/shared/lru_cache.py
http://dl.dropbox.com/u/3967849/sj49/regular_class.py
http://dl.dropbox.com/u/3967849/sj49/dict_class.py
http://dl.dropbox.com/u/3967849/sj49/function_class.py
http://dl.dropbox.com/u/3967849/sj49/class_class.py
http://dl.dropbox.com/u/3967849/sj49/module_demo.py
 http://dl.dropbox.com/u/3967849/sj49/client_code.py
 http://dl.dropbox.com/u/3967849/sj49/property_demo.py
http://dl.dropbox.com/u/3967849/sj49/dayone.log
 http://dl.dropbox.com/u/3967849/sj49/instrument_hash.py

How to automatically generate documentation:

    $ python -m pydoc -w circle

Day Two Notes
=============
http://dl.dropbox.com/u/3967849/sj49/operator_class.py
 http://dl.dropbox.com/u/3967849/sj49/best_class.py
http://dl.dropbox.com/u/3967849/sj49/dict_demo.py
http://dl.dropbox.com/u/3967849/sj49/bloom.py
http://dl.dropbox.com/u/3967849/sj49/bitarray.py
http://dl.dropbox.com/u/3967849/shared/spelling.py
http://dl.dropbox.com/u/3967849/shared/words.txt
 http://dl.dropbox.com/u/3967849/sj49/getattribute_demo.py
http://dl.dropbox.com/u/3967849/shared/big.txt
 http://dl.dropbox.com/u/3967849/sj49/codegen.py
http://dl.dropbox.com/u/3967849/sj49/module_demo.py
 http://dl.dropbox.com/u/3967849/sj49/demo_getattr.py
 http://dl.dropbox.com/u/3967849/sj49/translate.py
http://dl.dropbox.com/u/3967849/sj49/event_loop.py

http://dl.dropbox.com/u/3967849/sj49/daytwo.log
 http://dl.dropbox.com/u/3967849/sj49/subclass.py
 http://dl.dropbox.com/u/3967849/sj49/password.py
http://dl.dropbox.com/u/3967849/shared/ArtOfSubclassing.pdf

    class CIdict(dict):
	'Case insensitive dictionary'
	# note that dict.get() is unaffected
	# because of the Open-Closed Principle
	
	def __setitem__(self, key, value):
		key = key.lower()
		dict.__setitem__(self, key, value)
		
	def __getitem__(self, key):
		key = key.lower()
		return dict.__getitem__(self, key)


Day Three Notes
===============

http://dl.dropbox.com/u/3967849/sj49/daythree.log
http://dl.dropbox.com/u/3967849/sj49/slots.py


Cython, Pip, and VirtualEnv
---------------------------
 http://dl.dropbox.com/u/3967849/sj49/bitarray.py
 http://dl.dropbox.com/u/3967849/sj49/cbitarray.pyx
 http://dl.dropbox.com/u/3967849/sj49/cbitarray_setup.py

    Starting point is working C compiler and build environment:
        (ubuntu) apt-get install python-dev
        (mac) AppStore and install XCode
              Start Preferences:  Goto Downloads:  Install command-line tools
    How to make a pyx:
        copied bitarray.py cbitarray.pyx and then add annotations (int, str)
    Building a pyx is done with setup.py:
        cython cbitarray.pyx -> cbitarray.c -> cbitarray.o -> install .so to site-packages

    $ python distribute_setup.py
    $ python get-pip.py
    $ pip install virtualenv
    $ virtualenv myproj
    $ source myproj/bin/activate
    (myproj) $ pip install cython
    (myproj) $ python cbitarray_setup.py install 
    (myproj) $ python
    >>> import cbitarray
    >>> ^D
    (myproj) $ deactivate
    $ 

How to write C Extensions
-------------------------

 http://dl.dropbox.com/u/3967849/sj49/demo.c
 http://dl.dropbox.com/u/3967849/sj49/setup.py

To install the demo.c file:
        $ python setup.py install
        $ python
        >>> import demo
        >>> demo.collatz(5)
        16
        >>> help(demo)

http://dl.dropbox.com/u/3967849/sj49/metaclass_demo.py
http://dl.dropbox.com/u/3967849/sj49/property_demo.py
http://dl.dropbox.com/u/3967849/shared/descriptors.pdf

How to make an iterator out of a function:

    f = open('tmp.dat')
    for block in iter(partial(f.read, 10), ''):
	print block

Ways to make a callable:

    def f(x):
         return x*x
    f = lambda x: x*x
    f = functools.partial(pow, 2)
    f = str.lower                       # unbound method
    f = d.bark                          # bound method
    f = operator.itemgetter(2,5)        # lambda r: (r[2], r[5])
    f = operator.attrgetter('x', 'y')   # lambda r: (r.x, r.y)
    class ItemGetter:
	def __init__(self, x):
             self.x = x
	def __call__(self, r):
	     return r[self.x]


Important special methods:
    
    d[k]      __getitem__
                   ^------->    __missing__ or KeyError
    d[k]=v    __setitem__
    del d[k]  __delitem__


    a.m       __getattribute__
                    ^------>    __getattr__ or AttributeError
    a.m = x   __setattr__
    del a.m   __delattr__

 http://dl.dropbox.com/u/3967849/sj49/mastermind.py
 http://dl.dropbox.com/u/3967849/sj49/mm.c
 http://dl.dropbox.com/u/3967849/sj49/setup.py

To make a fresh copy of Python (different from the one on your system):

    1. Download the tarball:
        http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
    2. Unzip
    3. $ ./configure --prefix=~/mynewpy
    4. $ make
    5. $ ./python.exe 


To install the C-extension:
    
    $ python setup.py install

    
Functional tools:
    
    hits = sum([a==b for a, b in zip(secret, guess)])
    hits = sum(map(eq, secret, guess))
    
Counter objects:
    (Counter(secret) & Counter(guess)).values()

    class MyCounter(dict):
            def __missing__(self, key):
                    return 0
            def __add__(self, other):
                    result = MyCounter()
                    for k, v in self.items():
                            result[k] = v
                    for k, v in other.items():
                            result[k] += v
                    return result

Day Four Notes
==============

Argument Packing and Unpacking:

    Positional:
        f(a, b, *t)           # Unpacks tuple t into separate positional arguments
        def f(a, b, *t):...   # Packs variable length args into a tuple
    Keywords:
        f(a, b, **d)          # Unpacks dict d into separate keyword arguments
        def f(a, b, **kwds)   # Packs keywords args into a dictionary

Accessing attributes whose name is known only by a string:
    a.x      <==>   getattr(a, 'x')
    a.x=10   <==>   setattr(a, 'x', 10)
    del a.x  <==>   delattr(a, 'x')

Lambda school:

    Create anonymous in-line functions
    ----------------------------------
    100 + (lambda x, y:  3*x+y)(10, 20)

    Trap global variables in a default argument
    -------------------------------------------
    w = Window('Debugger output')
    for action in 'run shoot hide communicate surrender'.split():
        b = Button(parent=w, callback=lambda action=action.upper(): do(action))

    Delayed evaluation (promises, thunks, freeze/thaw):
    ---------------------------------------------------
    f = lambda : 2 ** 200 - 1      # prepare to do calculation
    f()                            # now do the work

Logging:

    import logging
    logging.basicConfig
        filename (filename)  
        stream   (a currently open file)
        level    (logging.INFO)
        format   (format of the logging message)
    %(levelname)s  %(levelno)s
    %(modules)s    %(lineno)s
    %(asctime)s   %(created)s

    logging.basicConfig(
        filename = 'sj_class.log',
        level = logging.INFO,
        format = 'We got a %(levelname)s message at %(asctime): %(message)'
    )
    logging.info('Just letting you know that I finished task X')

Pip:

 http://python-distribute.org/distribute_setup.py
 http://raw.github.com/pypa/pip/master/contrib/get-pip.py

    $ python distribute_setup.py
    $ python get-pip.py

VirtualEnv:
    http://pypi.python.org/pypi/virtualenv

    $ pip install virtualenv
    $ virtualenv myproj
    $ source myproj/bin/activate
    (myproj) $ pip install requests
    (myproj) $ python
    >>> import requests
    >>> ^D
    (myproj) $ deactivate
    $ # back to normal

PyFlakes -- Avoid embarrassment using a Python lint

    $ pip install pyflakes
    $ pyflakes circle.py

In case the XCode tools aren't being found on the Mac,
teach Mac OS X Lion where to the finder dev tools,
by adding the following to the .bashrc or .bash_profile:
    
    export PATH=/Developer/usr/bin:${PATH}

Recommended Python Packages:

    requests            -- clean library for making HTTP requests
    reverend            -- Bayesian classifier
    pyflakes            -- lint tool
    html5lib            -- html parser
    BeautifulSoup       -- html parser
    pyserial            -- communicate using serial ports
    nose or py.test     -- improved version of unittest
    pytz                -- timezone calculations
    flask               -- lightweight webframework for REST APIs
    pycrypto            -- cryptographic toolkit
    pexpect             -- scriptable version of Expect
    virtualenv          -- create alternate location for site-packages
    sympy               -- symbolic mathematics
    numpy               -- numerical processing (like Matlab/Octave)
    ipython             -- alternative interactive prompt
    scipy               -- scientific data analysis toolkit
    cython              -- generate C with an annotated Python syntax
    matplotlib          -- data visualization
    scrapy              -- screen scraping and web crawling
    fabric              -- tool for running commands on foreign systems
    pil                 -- Python Imaging Library
    xlrd / xlwt         -- Read and write MS Excel files

http://dl.dropbox.com/u/3967849/shared/mpl_demo.py
http://dl.dropbox.com/u/3967849/shared/beautifulsoup4-4.1.0.tar.gz

http://dl.dropbox.com/u/3967849/sj49/event_loop.py

 http://dl.dropbox.com/u/3967849/sj49/ownthedot.py
 http://dl.dropbox.com/u/3967849/sj49/better_class_with_descriptors.py

 http://dl.dropbox.com/u/3967849/sj49/fruit.xls
 http://dl.dropbox.com/u/3967849/sj49/read_excel.py
 http://dl.dropbox.com/u/3967849/sj49/fruit.xml

 http://dl.dropbox.com/u/3967849/sj49/dayfour.log

 http://dl.dropbox.com/u/3967849/sj49/slow.py

 http://dl.dropbox.com/u/3967849/sj49/project.c
 http://dl.dropbox.com/u/3967849/sj49/project.i

 http://dl.dropbox.com/u/3967849/sj49/ioloop_demo.py
 http://dl.dropbox.com/u/3967849/sj49/tornado_ioloop.py

http://dl.dropbox.com/u/3967849/sj49/newstyle_class.py

 http://dl.dropbox.com/u/3967849/sj49/own_the_dot.py
 http://dl.dropbox.com/u/3967849/sj49/multiprocess_threads.py

 http://dl.dropbox.com/u/3967849/shared/unicode.pdf

 http://dl.dropbox.com/u/3967849/sj49/demo_meta.py
 http://dl.dropbox.com/u/3967849/sj49/rh_way_classes.py
 http://dl.dropbox.com/u/3967849/sj49/demo_getattr.py
 http://dl.dropbox.com/u/3967849/sj49/metaclass.py

 http://dl.dropbox.com/u/3967849/sj49/rpc_demo.py
 http://dl.dropbox.com/u/3967849/sj49/xmlrpc_example.py

 http://dl.dropbox.com/u/3967849/sj49/module_demo.py
 http://dl.dropbox.com/u/3967849/sj49/tmp.py
 http://dl.dropbox.com/u/3967849/sj49/eight_queens.py
 http://dl.dropbox.com/u/3967849/sj49/sudoku.py
 http://dl.dropbox.com/u/3967849/sj49/puzzle.py
 http://dl.dropbox.com/u/3967849/sj49/alphametics.py
 http://dl.dropbox.com/u/3967849/sj49/neural_net.py
 http://dl.dropbox.com/u/3967849/sj49/jets.txt
 http://dl.dropbox.com/u/3967849/sj49/map_demo.py
 http://dl.dropbox.com/u/3967849/sj49/property_demo.py
 http://dl.dropbox.com/u/3967849/sj49/getattr_demo.py
 http://dl.dropbox.com/u/3967849/shared/AI.pdf



Using Cython on Windows
=======================
1- download the right cython package for your python from here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython
 
2- You may need to create this file: <HOME>\pydistutils.cfg with this contents:

   [build_ext]
   compiler=mingw32
 
2.1 : This is how to find your home dir:

    >>> import os
    >>> os.path.expanduser('~')
 
3. Building a Cython module using distutils
 
Imagine a simple “hello world” script in a file hello.pyx:
 
    def say_hello_to(name):
        print("Hello %s!" % name)
 
The following could be a corresponding setup.py script:
 
   from distutils.core import setup
   from distutils.extension import Extension
   from Cython.Distutils import build_ext
 
   ext_modules = [Extension("hello", ["hello.pyx"])]
 
   setup(
      name = 'Hello world app',
      cmdclass = {'build_ext': build_ext},
      ext_modules = ext_modules  
   )
 
To build, run:
  
   $ python setup.py build_ext --inplace

   (add  --compiler= mingw32 if compiler could not be found)
 
 
Then simply start a Python session and do from hello import say_hello_to and use
the imported function as you see fit.
 
